#ifndef FEM_H
#define FEM_H


/* vacuous declarations and typedef names */

/* class-like structure */
struct FEM_s     ; typedef struct FEM_s     FEM_t ;


#include "Mesh.h"
#include "Element.h"
#include "IntFct.h"
#include "Load.h"
#include "Utils.h"

/* Extern Functions */

extern FEM_t*   (FEM_GetInstance)(Element_t*) ;
extern void     (FEM_Delete)(void*) ;

/* Matrices */
extern double*  (FEM_ComputeStiffnessMatrix)(FEM_t*,IntFct_t*,const double*,const int) ;
extern double*  (FEM_ComputeMassMatrix)(FEM_t*,IntFct_t*,const double*,const int) ;
extern double*  (FEM_ComputeConductionMatrix)(FEM_t*,IntFct_t*,const double*,const int) ;
extern double*  (FEM_ComputeBiotMatrix)(FEM_t*,IntFct_t*,const double*,const int) ;
extern double*  (FEM_ComputePoroelasticMatrix6)(FEM_t*,IntFct_t*,const double*,const int,const int,const int) ;
extern double*  (FEM_ComputePoroelasticMatrixBis)(FEM_t*,IntFct_t*,const double*,const int,const int,const int) ;
extern double*  (FEM_ComputeConductionMatrices)(FEM_t*,IntFct_t*,double const*,int const,int const);
extern double*  (FEM_AssemblePoroelasticAndConductionMatrices)(FEM_t*,int const,int const,double const*,double*) ;

extern void     (FEM_TransformMatrixFromDegree2IntoDegree1)(FEM_t*,const int,const int,double*) ;


#define FEM_ComputeElasticMatrix(...) \
        FEM_ComputeStiffnessMatrix(__VA_ARGS__)

#define FEM_ComputePoroelasticMatrix(...) \
        Utils_CAT_NARG(FEM_ComputePoroelasticMatrix,__VA_ARGS__)(__VA_ARGS__)

#define FEM_ComputePoroelasticMatrix5(...) \
        FEM_ComputePoroelasticMatrix6(__VA_ARGS__,0)

/* Residus */
extern double*  (FEM_ComputeSurfaceLoadResidu)(FEM_t*,IntFct_t*,Load_t*,const double,const double) ;
extern double*  (FEM_ComputeBodyForceResidu)(FEM_t*,IntFct_t*,const double*,const int) ;
extern double*  (FEM_ComputeStrainWorkResidu)(FEM_t*,IntFct_t*,const double*,const int) ;
extern double*  (FEM_ComputeFluxResidu)(FEM_t*,IntFct_t*,const double*,const int) ;
extern void     (FEM_TransformResiduFromDegree2IntoDegree1)(FEM_t*,const int,const int,double*) ;
extern double*  (FEM_ComputeMassResidu)(FEM_t*,IntFct_t*,const double*,const double*,const int) ;
extern double*  (FEM_ComputeMassBalanceEquationResidu)(FEM_t*,IntFct_t*,const double*,const double*,const double*,const double,const int) ;

/* Compute Shape functions */
extern double*  (FEM_ComputeIsoShapeFctInActualSpace)(FEM_t*,double*) ;


/* Compute unknowns and unknown gradients: method 1 */
extern double   (FEM_ComputeCurrentUnknown)(FEM_t*,double*,int,int) ;
extern double   (FEM_ComputePreviousUnknown)(FEM_t*,double*,int,int) ;

extern double*  (FEM_ComputeCurrentUnknownGradient)(FEM_t*,double*,int,int) ;
extern double*  (FEM_ComputePreviousUnknownGradient)(FEM_t*,double*,int,int) ;

extern double*  (FEM_ComputeCurrentLinearStrainTensor)(FEM_t*,double*,double*,int,int) ;
extern double*  (FEM_ComputePreviousLinearStrainTensor)(FEM_t*,double*,double*,int,int) ;
extern double*  (FEM_ComputeIncrementalLinearStrainTensor)(FEM_t*,double*,double*,int,int) ;


/* Compute unknowns and unknown gradients: method 2 */
#if 0
extern double*  (FEM_ComputeUnknowns)(FEM_t*,IntFct_t*,double const* const*,int) ;
extern double*  (FEM_ComputeUnknownGradients)(FEM_t*,IntFct_t*,double const* const*,int) ;
extern double*  (FEM_ComputeLinearStrainTensors)(FEM_t*,IntFct_t*,double const* const*,int) ;
#endif

extern double   (FEM_ComputeUnknown)(FEM_t*,double const* const*,IntFct_t*,int,int) ;
extern double*  (FEM_ComputeUnknownGradient)(FEM_t*,double const* const*,IntFct_t*,int,int) ;
extern double*  (FEM_ComputeLinearStrainTensor)(FEM_t*,double const* const*,IntFct_t*,int,int) ;
extern double*  (FEM_ComputeDisplacementVector)(FEM_t*,double const* const*,IntFct_t*,int,int) ;


/* Compute element integration */
extern double   (FEM_IntegrateOverElement)(FEM_t*,IntFct_t*,double*,int) ;

/* Averaging */
extern void     (FEM_AverageStresses)(Mesh_t*,double*) ;
extern double   (FEM_AverageCurrentImplicitTerm)(Mesh_t*,const char*,const int,const int) ;
extern double   (FEM_AveragePreviousImplicitTerm)(Mesh_t*,const char*,const int,const int) ;
extern void     (FEM_AddAverageTerms)(FEM_t*,const int,const int,const int) ;

extern double   (FEM_ComputeVolume)(Mesh_t*) ;



#include "Models.h"

#define FEM_MaxShift                             (81 + 18*Model_MaxNbOfEquations + 9*Model_MaxNbOfEquations*Model_MaxNbOfEquations)
#define FEM_MaxNbOfMatrices                      (4)
#define FEM_MaxSizeOfMatrix                      (Element_MaxNbOfDOF*Element_MaxNbOfDOF*sizeof(double))
#define FEM_SizeOfBuffer                         (FEM_MaxNbOfMatrices*FEM_MaxSizeOfMatrix)


#define FEM_GetElement(fem)                      ((fem)->el)
#define FEM_GetPointerToIntFct(fem)              ((fem)->pintfct)
#define FEM_GetInput(fem)                        ((fem)->input)
#define FEM_GetOutput(fem)                       ((fem)->output)
#define FEM_GetShiftOfInput(fem)                 ((fem)->shift)
#define FEM_GetBuffers(fem)                      ((fem)->buffers)


#define FEM_SetElement(fem,A) \
        do {\
          FEM_GetElement(fem) = A;\
        } while(0)
        
#define FEM_SetPointerToIntFct(fem,A) \
        do {\
          FEM_GetPointerToIntFct(fem) = A;\
        } while(0)
        
#define FEM_SetInput(fem,A) \
        do {\
          FEM_GetInput(fem) = A;\
        } while(0)
        
#define FEM_SetOutput(fem,A) \
        do {\
          FEM_GetOutput(fem) = A;\
        } while(0)
        
#define FEM_SetShiftOfInput(fem,A) \
        do {\
          FEM_GetShiftOfInput(fem) = A;\
        } while(0)

#define FEM_SetBuffers(fem,A) \
        do {\
          FEM_GetBuffers(fem) = A;\
        } while(0)


/* Buffer */
#define FEM_GetBuffer(fem) \
        Buffers_GetBufferOfCurrentThread(FEM_GetBuffers(fem))
        

#define FEM_AllocateInBuffer(fem,sz) \
        (Buffer_Allocate(FEM_GetBuffer(fem),(sz)))
        
#define FEM_FreeBuffer(fem) \
        (Buffer_Free(FEM_GetBuffer(fem)))
        
#define FEM_FreeBufferFrom(fem,p) \
        (Buffer_FreeFrom(FEM_GetBuffer(fem),(char*) (p)))



#include "Buffers.h"
#include "GenericObject.h"

struct FEM_s {                /* Finite Element Method */
  Element_t* el ;             /* Element */
  IntFct_t** pintfct ;        /* Pointer to interpolation functions */
  void*      input ;
  void*      output ;
  int        shift ;
  Buffers_t* buffers ;        /* Buffers */
  GenericObject_Delete_t* Delete ;
} ;

#endif
