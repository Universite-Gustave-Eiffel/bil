#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include "Message.h"
#include "TypeId.h"
#include "Mry.h"


#define _INLINE_ inline

/* Global functions */

_INLINE_ GenericData_t* (GenericData_New)(void)
{
  GenericData_t* gdat = (GenericData_t*) Mry_New(GenericData_t) ;
  
  /* Allocation for the name */
  {
    char* name = (char*) Mry_New(char[GenericData_MaxLengthOfKeyWord + 1]) ;
    
    GenericData_SetName(gdat,name) ;
    strcpy(GenericData_GetName(gdat),"\0") ;
  }
  
  {
    TypeId_t* typ = TypeId_Create();
    
    GenericData_SetTypeId(gdat,typ) ;
    GenericData_SetNbOfData(gdat,0) ;
    //GenericData_SetData(gdat,NULL) ;
  }
  
  {
    GenericData_SetNextGenericData(gdat,NULL) ;
    GenericData_SetPreviousGenericData(gdat,NULL) ;
  }
  
  GenericData_SetDelete(gdat,&GenericData_Delete) ;
  
  return(gdat) ;
}




template<typename T>
_INLINE_ GenericData_t* (GenericData_Create)(int n,T* data,const char* name)
{
  GenericData_t* gdat = GenericData_New() ;
  
  GenericData_Initialize(gdat,n,data,name) ;
  
  return(gdat) ;
}



_INLINE_ void (GenericData_Delete)(void* self)
{
  GenericData_t*   gdat = (GenericData_t*) self ;
  
  if(gdat) {
    {
      char* name = GenericData_GetName(gdat) ;

      if(name) {
        free(name) ;
        GenericData_SetName(gdat,NULL) ;
      }
    }
    
    {
      TypeId_t* typ = GenericData_GetTypeId(gdat) ;
    
      if(typ) {
        size_t n = GenericData_GetNbOfData(gdat) ;
        void* data = GenericData_GetData(gdat) ;

        if(data) {
          size_t sz = GenericData_GetSize(gdat) ;
          
          for(size_t i = 0 ; i < n ; i++) {
            void* data_i = ((char*) data) + i*sz ;
            
            //GenericData_DeleteData(gdat,data_i) ;
            TypeId_DeleteData(typ,data_i) ;
          }

          free(data) ;
        }

        TypeId_Delete(typ); // Do nothing!
        free(typ);
        
        //GenericData_SetData(gdat,NULL) ;
        GenericData_SetTypeId(gdat,NULL) ;
        //GenericObject_Delete(&data) ;
      }
    }
  
    /* Delete also the linked generic data  */
    {
      GenericData_t*   prev = GenericData_GetPreviousGenericData(gdat) ;
      GenericData_t*   next = GenericData_GetNextGenericData(gdat) ;
      
      /* Connect prev and next */
      if(prev) GenericData_SetNextGenericData(prev,next) ;
      if(next) GenericData_SetPreviousGenericData(next,prev) ;
    
      if(prev) {
        GenericData_Delete(prev) ;
        free(prev) ;
        GenericData_SetPreviousGenericData(gdat,NULL) ;
      }
  
      if(next) {
        GenericData_Delete(next) ;
        free(next) ;
        GenericData_SetNextGenericData(gdat,NULL) ;
      }
    }
  }
}



template<typename T>
_INLINE_ void (GenericData_Initialize)(GenericData_t* gdat,int n,T* data,const char* name)
{
  //GenericData_SetTypeId(gdat,typ) ;
  GenericData_Set(gdat,data);
  GenericData_SetNbOfData(gdat,n) ;
  //GenericData_SetData(gdat,data) ;
    
  {
    #define GenericData_MIN(a,b)          (((a) < (b)) ? (a) : (b))
    size_t len = GenericData_MIN(strlen(name),GenericData_MaxLengthOfKeyWord) ;
    #undef GenericData_MIN
      
    strncpy(GenericData_GetName(gdat),name,len) ;
    GenericData_GetName(gdat)[len] = '\0' ;
  }
}



_INLINE_ GenericData_t* (GenericData_Append)(GenericData_t* a,GenericData_t* b)
/** Append "b" to "a". 
 *  Return the appended generic data (ie "a" or "b") or NULL pointer. */
{
  
  if(!a) {
    return(b) ;
  }
    
  /* Add b at the end of a:
   * a ... last(a) - b */
  {
    GenericData_t* lasta  = GenericData_Last(a) ;
    
    /* The condition is useless since "lasta" must not be NULL.  */
    if(lasta) GenericData_SetNextGenericData(lasta,b) ;
    if(b) GenericData_SetPreviousGenericData(b,lasta) ;
    
    return(a) ;
  }
}



_INLINE_ GenericData_t* (GenericData_Last)(GenericData_t* gdat)
/** Return the last generic data or NULL pointer. */
{
  if(gdat) {
    GenericData_t* next ;
    
    while((next = GenericData_GetNextGenericData(gdat))) gdat = next ;
  }
  
  return(gdat) ;
}



_INLINE_ GenericData_t* (GenericData_First)(GenericData_t* gdat)
/** Return the first generic data or NULL pointer. */
{
  if(gdat) {
    GenericData_t* prev ;
    
    while((prev = GenericData_GetPreviousGenericData(gdat))) gdat = prev ;
  }
  
  return(gdat) ;
}



_INLINE_ GenericData_t* (GenericData_Find)(GenericData_t* gdat,const char* name)
/** Return the generic data named as "name" or NULL pointer. */
{
  {
    GenericData_t* next = gdat ;
    
    while(next) {
      if(GenericData_Is(next,name)) return(next) ;
      next = GenericData_GetNextGenericData(next) ;
    }
  }
  
  {
    GenericData_t* prev = gdat ;
    
    while(prev) {
      if(GenericData_Is(prev,name)) return(prev) ;
      prev = GenericData_GetPreviousGenericData(prev) ;
    }
  }
  
  return(NULL) ;
}

#undef _INLINE_
