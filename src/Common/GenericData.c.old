#if 0
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>

#include "Message.h"
#include "TypeId.h"
#include "GenericData.h"


static void      (GenericData_DeleteData)(GenericData_t*,void*) ;


void (GenericData_Delete)(void* self)
{
  GenericData_t*   gdat = (GenericData_t*) self ;
  
  if(gdat) {
    {
      char* name = GenericData_GetName(gdat) ;

      if(name) {
        free(name) ;
        GenericData_SetName(gdat,NULL) ;
      }
    }
    
    {
      TypeId_t* typ = GenericData_GetTypeId(gdat) ;
    
      if(typ) {
        int n = GenericData_GetNbOfData(gdat) ;
        void* data = GenericData_GetData(gdat) ;

        if(data) {
          size_t sz = GenericData_GetSize(gdat) ;
          
          for(int i = 0 ; i < n ; i++) {
            void* data_i = ((char*) data) + i*sz ;
            
            //GenericData_DeleteData(gdat,data_i) ;
            TypeId_DeleteData(typ,data_i) ;
          }

          free(data) ;
        }

        TypeId_Delete(typ); // Do nothing!
        free(typ);
        
        //GenericData_SetData(gdat,NULL) ;
        GenericData_SetTypeId(gdat,NULL) ;
        //GenericObject_Delete(&data) ;
      }
    }
  
    /* Delete also the linked generic data  */
    {
      GenericData_t*   prev = GenericData_GetPreviousGenericData(gdat) ;
      GenericData_t*   next = GenericData_GetNextGenericData(gdat) ;
      
      /* Connect prev and next */
      if(prev) GenericData_SetNextGenericData(prev,next) ;
      if(next) GenericData_SetPreviousGenericData(next,prev) ;
    
      if(prev) {
        GenericData_Delete(prev) ;
        free(prev) ;
        GenericData_SetPreviousGenericData(gdat,NULL) ;
      }
  
      if(next) {
        GenericData_Delete(next) ;
        free(next) ;
        GenericData_SetNextGenericData(gdat,NULL) ;
      }
    }
  }
}



#include "Damage.h"
#include "DataSet.h"
#include "Elasticity.h"
#include "ElementsSol.h"
#include "Exception.h"
#include "FEM.h"
#include "FEM2.h"
#include "FVM.h"
#include "InternationalSystemOfUnits.h"
#include "Math_.h"
#include "Options.h"
#include "Plasticity.h"
#include "Solutions.h"
#include "Solver.h"
#include "Solvers.h"

#include "BilExtraLibs.h"
#ifdef SUPERLUDISTLIB
  #include "superlu.h"
#endif

#ifdef PETSCLIB
  #include <petsc.h>
#endif


#if 0
void  (GenericData_DeleteData)(GenericData_t* gdat,void* self)
{
  TypeId_t* typ = GenericData_GetTypeId(gdat);
  
  switch(TypeId_GetIdNumber(typ)) {
    case TypeId_IdNumber(unsigned char)   : return ;
    case TypeId_IdNumber(char)            : return ;
    case TypeId_IdNumber(double)          : return ;
    case TypeId_IdNumber(long double)     : return ;
    case TypeId_IdNumber(float)           : return ;
    case TypeId_IdNumber(unsigned int)    : return ;
    case TypeId_IdNumber(short int)       : return ;
    case TypeId_IdNumber(int)             : return ;
    case TypeId_IdNumber(unsigned long)   : return ;
    case TypeId_IdNumber(long int)        : return ;
    case TypeId_IdNumber(Damage_t)        : Damage_Delete(self); return ;
    case TypeId_IdNumber(DataSet_t)       : DataSet_Delete(self); return ;
    case TypeId_IdNumber(Elasticity_t)    : Elasticity_Delete(self); return ;
    case TypeId_IdNumber(ElementsSol_t)   : ElementsSol_Delete(self); return ;
    case TypeId_IdNumber(Exception_t)     : Exception_Delete(self); return ;
    case TypeId_IdNumber(FEM_t)           : FEM_Delete(self); return ;
    case TypeId_IdNumber(FEM2_t)          : FEM2_Delete(self); return ;
    case TypeId_IdNumber(FVM_t)           : FVM_Delete(self); return ;
    case TypeId_IdNumber(GenericData_t)   : GenericData_Delete(self); return ;
    case TypeId_IdNumber(InternationalSystemOfUnits_t) : InternationalSystemOfUnits_Delete(self); return ;
    case TypeId_IdNumber(Math_t)          : Math_Delete(self); return ;
    case TypeId_IdNumber(Message_t)       : Message_Delete(self); return ;
    case TypeId_IdNumber(Options_t)       : Options_Delete(self); return ;
    case TypeId_IdNumber(Plasticity_t)    : Plasticity_Delete(self); return ;
    case TypeId_IdNumber(Solutions_t)     : Solutions_Delete(self); return ;
    case TypeId_IdNumber(Solver_t)        : Solver_Delete(self); return ;
    case TypeId_IdNumber(Solvers_t)       : Solvers_Delete(self); return ;
    /* from SuperLU_DIST */
    #ifdef SUPERLUDISTLIB
    case TypeId_IdNumber(dScalePermstruct_t): dScalePermstructFree(self); return ;
    case TypeId_IdNumber(dLUstruct_t)     : dLUstructFree(self); return ;
    case TypeId_IdNumber(gridinfo_t)      : superlu_gridexit(self); return ;
    #endif
    /* from Petsc */
    #ifdef PETSCLIB
    case TypeId_IdNumber(KSP)             : KSPDestroy(self); return;
    case TypeId_IdNumber(PC)              : PCDestroy(self); return;
    #endif
    default                               : break ;
  }
  
  Message_FatalError("GenericData_DeleteData: unknown type") ;
  
  return ;
}
#elif 0
void  (GenericData_DeleteData)(GenericData_t* gdat,void* self)
{
  TypeId_t* typ = GenericData_GetTypeId(gdat);

    if(typ->Holds<void>()) {
      return ;
    } else if(typ->Holds<char>()) {
      return ;
    } else if(typ->Holds<double>()) {
      return ;
    } else if(typ->Holds<int>()) {
      return ;
    } else if(typ->Holds<Damage_t>()) {
      Damage_Delete(self); return ;
    } else if(typ->Holds<DataSet_t>()) {
      DataSet_Delete(self); return ;
    } else if(typ->Holds<Elasticity_t>()) {
      Elasticity_Delete(self); return ;
    } else if(typ->Holds<ElementsSol_t>()) {
      ElementsSol_Delete(self); return ;
    } else if(typ->Holds<Exception_t>()) {
      Exception_Delete(self); return ;
    } else if(typ->Holds<FEM_t>()) {
      FEM_Delete(self); return ;
    } else if(typ->Holds<FEM2_t>()) {
      FEM2_Delete(self); return ;
    } else if(typ->Holds<FVM_t>()) {
      FVM_Delete(self); return ;
    } else if(typ->Holds<GenericData_t>()) {
      GenericData_Delete(self); return ;
    } else if(typ->Holds<InternationalSystemOfUnits_t>()) {
      InternationalSystemOfUnits_Delete(self); return ;
    } else if(typ->Holds<Math_t>()) {
      Math_Delete(self); return ;
    } else if(typ->Holds<Message_t>()) {
      Message_Delete(self); return ;
    } else if(typ->Holds<Options_t>()) {
      Options_Delete(self); return ;
    } else if(typ->Holds<Plasticity_t>()) {
      Plasticity_Delete(self); return ;
    } else if(typ->Holds<Solutions_t>()) {
      Solutions_Delete(self); return ;
    } else if(typ->Holds<Solver_t>()) {
      Solver_Delete(self); return ;
    } else if(typ->Holds<Solvers_t>()) {
      Solvers_Delete(self); return ;
    /* from SuperLU_DIST */
    #ifdef SUPERLUDISTLIB
    } else if(typ->Holds<dScalePermstruct_t>()) {
      dScalePermstructFree(self); return ;
    } else if(typ->Holds<dLUstruct_t>()) {
      dLUstructFree(self); return ;
    } else if(typ->Holds<gridinfo_t>()) {
      superlu_gridexit(self); return ;
    #endif
    /* from Petsc */
    #ifdef PETSCLIB
    } else if(typ->Holds<KSP>()) {
      KSPDestroy(self); return;
    } else if(typ->Holds<PC>()) {
      PCDestroy(self); return;
    #endif
    } else {
      Message_FatalError("GenericData_DeleteData: unknown type") ;
    }

  return ;
}
#endif
#endif

