#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <float.h>
#include <ctype.h>
#include <string.h>
#include <strings.h>
#include <assert.h>

#include "Session.h"
#include "GenericData.h"
#include "Message.h"
#include "Exception.h"
#include "Mry.h"
#include "autodiff.h"
#include "Math_.h"


static Math_t* (Math_GetInstance)(void) ;
static Math_t* (Math_Create)(void) ;
static int (Math_ComputePolynomialEquationRootsOfDegree4)(double*) ;
static int (Math_ComputePolynomialEquationRootsOfDegree3)(double*) ;
static int (Math_ComputePolynomialEquationRootsOfDegree2)(double*) ;

#define _INLINE_
#include "Math_.in"
#undef _INLINE_


#if 0
#include <time.h>
static void Math_Test(int, char**) ;

void Math_Test(int argc, char** argv)
{
  #define N 50
  int n = (argc > 1) ? atoi(argv[1]) : N ;
  double a[N*N] ;
  double ainv[N*N] ;
  double lu[N*N] ;
  double id[N*N] ;
  double b[N] ;
  double x[N] ;
  int indx[N] ;
  
  
  /* Fill a and b randomly */
  {
    int i ;
    
    srand(time(NULL)) ;
    srand(rand()) ;
      
    for(i = 0 ; i < n*n ; i++) {
      a[i] = (double) rand() ;
    }
    
    srand(time(0)+n) ;
    srand(rand()) ;
      
    for(i = 0 ; i < n ; i++) {
      b[i] = (double) rand() ;
    }
  }
  
   /* Copying */
  {
    int i ;
      
    for(i = 0 ; i < n*n ; i++) {
      lu[i] = a[i] ;
      ainv[i] = a[i] ;
    }
    
    for(i = 0 ; i < n ; i++) {
      x[i] = b[i] ;
    }
  }
  
  /* Printing */
  if(0) {
    int i ;
    
    printf("Matrix a:\n") ;
    Math_PrintMatrix(a,n) ;
    
    printf("The r.h.s:\n") ;
    printf("b: ") ;
    for(i = 0 ; i < n ; i++) {
      printf("%e ",b[i]) ;
    }
    
    printf("\n") ;
  }
  
  /* Printing the norm sup */
  {
    double norm ;
    double mean ;
    int i ;
    
    norm = 0 ;
    mean = 0 ;
    for(i = 0 ; i < n*n ; i++) {
      mean += fabs(a[i]) ;
      if(fabs(a[i]) > norm) norm = fabs(a[i]) ;
    }
    printf("Norm sup |a|: %e\n",norm) ;
    printf("Mean |a|: %e\n",mean/(n*n)) ;
    
    norm = 0 ;
    mean = 0 ;
    for(i = 0 ; i < n ; i++) {
      mean += fabs(b[i]) ;
      if(fabs(b[i]) > norm) norm = fabs(b[i]) ;
    }
    printf("Norm sup |b|: %e\n",norm) ;
    printf("Mean |b|: %e\n",mean/n) ;
  }
  
  /* Test */
  {
    //Math_SolveByGaussEliminationJIK(lu,x,n,indx) ;
    //Math_SolveByGaussEliminationKIJ(lu,x,n,indx) ;
    //Math_SolveByGaussEliminationJIK(lu,x,n,NULL) ;
    //Math_SolveByGaussEliminationKIJ(lu,x,n,NULL) ;
    Math_SolveByGaussElimination(lu,x,n) ;
    Math_InvertMatrix(ainv,n) ;
  }
  
  if(0) {
    int i ;
    
    printf("Solution:\n") ;
    for(i = 0 ; i < n ; i++) {
      printf("%e ",x[i]) ;
    }
    
    printf("\n") ;
    
    printf("Product a.x:\n") ;
    for(i = 0 ; i < n ; i++) {
      double y = 0 ;
      int j ;
      
      for(j = 0 ; j < n ; j++) {
        y += a[n*i+j]*x[j] ;
      }
      
      printf("%e ",y) ;
    }
    
    printf("\n") ;
  }
    
  {
    int i ;
    double err = 0 ;
    
    printf("Error = a.x - b:") ;

    for(i = 0 ; i < n ; i++) {
      double y = 0 ;
      int j ;
      
      for(j = 0 ; j < n ; j++) {
        y += a[n*i+j]*x[j] ;
      }
      
      y -= b[i] ;
      
      y = fabs(y) ;
      
      if(y > err) err = y ;
    }
      
    printf(" %e\n",err) ;
  }
    
  if(0) {
    int i ;
    
    printf("Matrix Id = a.ainv:\n") ;

    for(i = 0 ; i < n ; i++) {
      int j ;
      
      printf("Id[%d][-]: ",i) ;
      
      for(j = 0 ; j < n ; j++) {
        double y = 0 ;
        int k ;
        
        for(k = 0 ; k < n ; k++) {
          y += a[n*i+k] * ainv[n*k+j] ;
        }
        
        printf("%e ",y) ;
      }
    
      printf("\n") ;
    }
    
    printf("\n") ;
  }
    
  {
    int i ;
    double err = 0 ;
    
    printf("Error = a.ainv - Id:") ;

    for(i = 0 ; i < n ; i++) {
      int j ;
      
      for(j = 0 ; j < n ; j++) {
        double y = 0 ;
        int k ;
        
        for(k = 0 ; k < n ; k++) {
          y += a[n*i+k] * ainv[n*k+j] ;
        }
      
        if(i == j) y -= 1 ;
      
        y = fabs(y) ;
      
        if(y > err) err = y ;
      }
    }
      
    printf(" %e\n",err) ;
  }
}



#define PRINTMAT(N,A) \
        do {\
          int i ;\
          for(i = 0 ; i < N ; i++) {\
            int j ;\
            printf("Row(%d)-Col(1-%d): (",i + 1,N) ;\
            for (j = 0 ; j < N ; j++) {\
              printf(" % e",A[i*(N) + j]) ;\
            }\
            printf(")\n") ;\
          }\
        } while(0)



static int Math_TestDGEEV(int,char**) ;

int Math_TestDGEEV(int argc,char** argv)
{
  #define  A(i,j)  (a[(i)*3+(j)])
  double a[9] = {1,0,0,0,25,0,0,0,400};
  double* eigv = Math_ComputeRealEigenvaluesAndEigenvectorsOf3x3Matrix(a,'r');
  
  printf("a\n") ;
  Math_PrintMatrix(a,3) ;
  
  {
    int i;
    
    printf("Eigen values:\n") ;
    for(i = 0 ; i < 3 ; i++) {
      printf("%e ",eigv[i]);
    }
    printf("\n") ;
  }
  
  return(0) ;
}


/*
 * Compilation: 
 * g++ -gdwarf-2 -g3  -L/home/dangla/Documents/Softwares/bil/bil-master/lib -Wl,-rpath=/home/dangla/Documents/Softwares/bil/bil-master/lib -lbil-2.8.8-Debug  -o out -lgfortran
*/
int main(int argc, char** argv)
{
  Session_Open() ;
  
  Math_Test(argc,argv) ;
  Math_TestDGEEV(argc,argv) ;
  
  Session_Close() ;
  return(0) ;
}
#endif
