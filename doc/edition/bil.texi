\input texinfo.tex @c -*-texinfo-*-
@c =========================================================================
@c
@c This is the Bil documentation texinfo source file
@c 
@c =========================================================================
@c %**start of header
@setfilename        bil.info
@include version.texi
@set BIL-WEB        @uref{http://bil.ifsttar.fr}
@set COPYRIGHT      @copyright{} 2002-2006 Patrick Dangla.
@c @set BIL            Bil-@value{BIL-VERSION} @c Not used
@c
@documentlanguage en
@c documentencoding ISO-8859-1
@documentencoding UTF-8
@c
@settitle Bil @value{BIL-VERSION}
@footnotestyle separate
@setchapternewpage odd
@paragraphindent 0
@finalout
@afourpaper
@c %**end of header

@c merge function index into type index
@syncodeindex fn tp

@copying
Copyright @value{COPYRIGHT}
@quotation
Permission is granted to make and distribute verbatim copies of this manual
provided the copyright notice and this permission notice are preserved on
all copies.
@end quotation
@end copying

@c =========================================================================
@c Info directives
@c =========================================================================

@ifinfo
@dircategory Math
@direntry
* Bil: (bil).  Modeling platform based on finite element/volume methods
@end direntry
@noindent
This is the  @cite{Bil Reference Manual} for Bil @value{BIL-VERSION} (@today{}).
@noindent
Copyright @value{COPYRIGHT}
@end ifinfo

@c =========================================================================
@c Title page
@c =========================================================================

@c @shorttitlepage Bil

@titlepage
@title Bil Reference Manual
@subtitle The documentation for Bil @value{BIL-VERSION} (@today{})
@subtitle A modeling platform based on finite element/volume methods
@author Patrick Dangla

@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c =========================================================================
@c Table of contents
@c =========================================================================

@c @summarycontents
@contents

@c =========================================================================
@c Top node (for all output, except TeX)
@c =========================================================================

@ifnottex
@node Top, Copying conditions, (dir), (dir)
@top Bil

Patrick Dangla

Bil is a modeling platform based on finite element/volume methods dedicated to coupled problems involved in environmental engineering, geomechanical engineering, material sciences, etc.. This is the @cite{Bil Reference Manual} for Bil @value{BIL-VERSION} (@today{}).
@end ifnottex

@c =========================================================================
@c Master menu
@c =========================================================================

@menu
* Copying conditions::
* Introduction::
* Running Bil::
* Input data file::
* Output files::
* Other files::
* Models::
* How to develop a new model?::
* Examples::
* Version history::
* License::

@ignore
@detailmenu
 --- The Detailed Node Listing ---

Running Bil

* Options::

Input data file

* Geometry::
* Mesh::
* Material::
* Fields::
* Initialization::
* Functions::
* Boundary Conditions::
* Loads::
* Points::
* Dates::
* Objective Variations::
* Time Steps::
* Iterative Process::
* Units::
* Periodicities::

Output files

* Results at some dates::
* Results at some points::   

All files

* .t@emph{i}::
* .p@emph{i}::
* .pos@emph{i}::
* .msh::
* .graph.iperm::
* .sto::
* .cont::
* .conti::

Models

* Definition of a model::
* Examples of existing models::
* How to develop a new model?::

Examples of input data file

* m1::

Version history

* Version history::

@end detailmenu
@end ignore
@end menu

@c =========================================================================
@c Copying Conditions
@c =========================================================================

@node Copying conditions, Introduction, Top, Top
@unnumbered Copying conditions

@include copying.texi

@c =========================================================================
@c Introduction
@c =========================================================================

@node Introduction, Running Bil, Copying conditions, Top
@chapter Introduction

Bil is a modeling platform based on finite element/volume methods dedicated to coupled problems involved in environmental engineering, geomechanical engineering, material sciences, etc.. Bil is distributed under the terms of the GNU General Public License (GnuGPL). The source code can be downloaded at
@sp 1
@center @value{BIL-WEB}
@sp 1
Bil is intended to be used by students, engineers or reseachers to work out problems or develop their own models. Bil is written in C language. Thus provided that a C compiler was installed, it can run on any OS like Windows, MacOS or Linux-based OS.@c However the complete installation of Bil (including documentations) can be achieved on Linux-based OS only (Debian, Ubuntu, etc..).

Bil is developped for 1D, 2D and 3D problems. It doesn't include a mesh generator and post-processing treatment of outputs. However it can read mesh files created by the open-source free software Gmsh downloadable at @uref{http://www.geuz.org/gmsh/}. The output files created by Bil for 1D problems can be used easily by some plotting programs such as Gnuplot. But as a general rule, post-processing options create output files which can be used by Gmsh for post-processing treatments (see Bil options).

@c =========================================================================
@c Running Bil
@c =========================================================================

@node Running Bil, Input data file, Introduction, Top
@chapter Running Bil

Bil can be run non-interactively only. To compute the solution of a problem described in the input data file @file{my_file}, type:
@sp 1
@command{bil [@var{options}] my_file}
@sp 1
The input data file format is described in the following section. Without any option, running Bil will create the output files @file{my_file.p@var{i}} and @file{my_file.t@var{i}} (@pxref{Output files}). @c If there is no input data file named @file{my_file}, Bil will open this file in writing mode and will ask the user for the input data. 
With the option -h (help) there is no input data file to give. The command
@sp 1
@command{bil}
@sp 1
(alone) displays the available options.

@ignore
@sp 1
Options are:
@sp 1
@multitable @columnfractions 0.2 0.8
@item @option{-d} @var{key-word} @tab print data for @var{key-word}
@item @option{-g} @var{method} @tab output the file @file{my_file.graph} related to @var{method}:
@item  @tab @var{method} = metis : for METIS
@item  @tab @var{method} = hsl   : for HSL_MC40
@item  @tab @var{method} = sloan : method proposed by Sloan
@item @option{-h} @tab on-line help (without any other argument)
@item @option{-i} @tab output the inverse permutation file @file{my_file.graph.iperm}
@item @option{-info} @tab print general informations
@item @option{-p} @tab output the post-processing files @file{my_file.pos@var{i}} for Gmsh
@item @option{-r} @tab read only the input data file @file{my_file}
@item @option{-s} @var{method} @tab use a specific method to solve the linear system:
@item  @tab @var{method} = crout : CROUT method (default)
@item  @tab @var{method} = slu   : method proposed by SuperLU
@item @option{-m} @tab display the available models
@item @option{-m} @var{MOD} @tab display an example of input data for the model @var{MOD}
@end multitable
@sp 1
@end ignore

The way Bil will run may depend whether there are some other files (@pxref{Other files}). The most important of them, namely @file{my_file.graph.iperm}, defines the way nodes are renumbered so as to optimize the storage of the LU decomposition of the matrix, in case of a Gauss elimination method (Crout's method). Except in 1D problems where nodes are numbered from one end to the other of the mesh, it is very important, if not essential, to create this file with an aquedate option, e.g. -iperm, (see Bil options). In case of multi-frontal methods (such as SuperLU or MA38) or Krylov space methods (such as those found in Petsc library), this file is not needed.

@c =========================================================================
@c Input data file
@c =========================================================================

@node Input data file, Output files, Running Bil, Top
@chapter Input data file format

The file @file{my_file}, as mentionned above, provides the input data of the problem to be worked out. A list of reserved key-words (with an upper-case first letter) organizes the inputs in several groups such as mesh, material properties, boundary conditions, etc. For example the key-word @code{Geometry} is followed by the inputs defining the dimension and the symmetry of the problem. Any content of a line after @code{#} is considered as comments and skipped. The full list of reserved key-words which must appear in @file{my_file} is given in the table below.

@sp 1
@multitable @columnfractions 0.35 0.65
@item @strong{key-word}           @tab @strong{description}

@item @code{Geometry}             @tab dimension and symmetry of the problem
@item @code{Mesh}                 @tab define the mesh
@item @code{Material}             @tab material properties of the material index 1
@item @code{@enddots{}}           @tab @enddots{}
@item @code{Material}             @tab material properties of the material index n
@item @code{Fields}               @tab define fields i.e. space functions
@item @code{Initialization}       @tab define the initial conditions
@item @code{Functions}            @tab define time functions
@item @code{Boundary Conditions}  @tab define the boundary conditions
@item @code{Loads}                @tab define the loads
@item @code{Points}               @tab define some points for output files
@item @code{Dates}                @tab define the dates for output files
@item @code{Objective Variations} @tab objective variations of the main unknowns
@item @code{Iterative Process}    @tab convergence criteria of iterative process
@item @code{Time Steps}           @tab time steps calculation
@end multitable
@sp 1

Some other optional input data can also be provided:

@sp 1
@multitable @columnfractions 0.35 0.65
@item @strong{key-word}           @tab @strong{description}

@item @code{Units}                @tab change the units
@item @code{Periodicities}        @tab periodicities of the mesh for peridiodic problems
@item @code{Model}                @tab the names of unknowns can be changed
@end multitable
@sp 1

An on-line help is provided by typing:
@sp 1
@command{bil -h}
@sp 1

@c =========================================================================
@c Output files
@c =========================================================================

@node Output files, Other files, Input data file, Top
@chapter Output files format

Each run produces 2 sets of output files. In the first set, output files are named:
@sp 1
@center @file{my_file.p@var{i}}
@sp 1
where @var{i} is an integer ranging from 1 to the number of points defined by the key-word @code{Points}. If there is no point no file will be created. These files provide the results obtained at the specified points. The first column contains the times at which the results have been obtained. The other columns contain the value of specific quantities as implemented in the model defined in the key-word @code{Material}. 
In the second set, output files are named:
@sp 1
@center @file{my_file.t@var{i}}
@sp 1
where @var{i} is an integer ranging from 0 to the number of dates defined by the key-word  @code{Dates}. These files provide the results obtained at the specified dates. The three first columns contain the three coordinates of nodes. The other column contain the value of the same quantities as those contained in the first set of files.

Some lines of these 2 sets of files are commented as indicated by the character @code{#} in the first column. These comments provide some informations about the nature of the computed quantities found in the following lines.

@c =========================================================================
@c Other files
@c =========================================================================

@node Other files, Models, Output files, Top
@chapter Other files

Bil produces some files and sometimes can read and use some other files. The name of these files are formed with the name of the input data file and suffixes, @file{my_file.@var{suf}}, in the same way as the output files. They are listed in the table below.

@sp 1
@multitable @columnfractions 0.35 0.65
@item @strong{file}              @tab @strong{description}

@item @file{my_file.t@var{i}}    @tab output files related to date index @var{i}
@item @file{my_file.p@var{i}}    @tab output files related to point index @var{i}
@item @file{my_file.pos@var{i}}  @tab view @var{i} to be read by Gmsh
@item @file{my_file.msh}         @tab Gmsh mesh file
@item @file{my_file.graph}       @tab mesh graph
@item @file{my_file.graph.iperm} @tab inverse permutations file
@item @file{my_file.sto}         @tab storage file
@item @file{my_file.cont}        @tab continuation file (see below for explanations)
@item @file{my_file.conti}       @tab continuation file (see below for explanations)
@c @caption{Files associated to the input data file.}
@end multitable
@sp 1

The files @file{my_file.cont} and @file{my_file.conti} allow to continue a previous computation or to resume an interrupted calculation achieved with a previous input data file (@file{my_previous_file}). With @file{my_file.cont} the process doesn't go through the initialization stage (@code{ComputeInitialState}, see below) so that the calculation continues as if there hadn't been interruption. With @file{my_file.conti} the process goes through the intitialization stage so that some variables of the model can be re-initialized (e.g. strain variables can be reset to zero). To do so, copy the file @file{my_previous_file.sto} in @file{my_file.cont} (or @file{my_file.conti}) and run bil with @file{my_file} as a new input data file in which you will have defined some additional dates beyond the last date defined in @file{my_previous_file}. Boundary conditions can also be modified in this new input data file in order to deal with changing from Dirichlet to Neumann boundary conditions.

@c =========================================================================
@c Models
@c =========================================================================

@node Models, How to develop a new model?, Other files, Top
@chapter Models

Mostly the concept of model refers to the constitutive equations or complementary laws that are needed to mathematically end up with a well-posed problem. However we need more informations, here, regarding the numerical methods that are used to handle complex problems and geometries. These methods are implemented in a single file whose basename identifies the code name of the model. Therefore the concept of model should be extended to fit with the set of informations pertaining to:
@sp 1
@itemize @bullet
@item The number and kind of equations to be solved
@item The complementary laws that are needed to have a well-posed problem
@item The informations associated to the numerical methods employed
@end itemize
@sp 1

Models aim at addressing the behavour of the material at the scale of one finite element. Therefore the methods defined in object "Model_t" aim at computing matrix, residual forces, outputs and so on, for the nodes of one element. The object "Element_t" is therefore the main input entry of all methods of object "Model_t".

A short description of the available models can be displayed by typing:
@sp 1
@command{bil -m}
@sp 1

@c =========================================================================
@c How to develop a new model?
@c =========================================================================

@node How to develop a new model?, Examples, Models, Top
@chapter How to develop a new model?

To tell Bil to account for a new model, you just need to create a new file, e.g. @file{my_model.c}, in the folder @file{src/Models/ModelFiles} of the Bil's source directory and add the basename of this file, namely @file{my_model}, to the list of the available models found in @file{src/Models/ListOfModels.inc}@footnote{Upper camel case convention is used to name the source files of this project. The same convention is used for the attributes and the methods of objects.}. This model will be taken into account automatically the next time binary files will be created.

To help you in creating this new file, it is recommended to learn from already existing files. This file should contain at least the 11 methods of the Model class-like structure. These methods are listed in the table below.

@sp 1
@multitable @columnfractions 0.35 0.65
@item @strong{method}             @tab @strong{description}

@item @code{SetModelProp}         @tab Set the model properties
@item @code{ReadMatProp}          @tab Read the material properties
@item @code{PrintModelProp}       @tab Print the model properties
@item @code{DefineElementProp}    @tab Define some properties of the element.
@item @code{ComputeInitialState}  @tab Compute the initial state
@item @code{ComputeExplicitTerms} @tab Compute the explicit terms
@item @code{ComputeMatrix}        @tab Compute the matrix
@item @code{ComputeResidu}        @tab Compute the residu
@item @code{ComputeLoads}         @tab Compute the loads
@item @code{ComputeImplicitTerms} @tab Compute the implicit terms
@item @code{ComputeOutputs}       @tab Compute the outputs

@c @caption{Methods of the Model class-like structure.}
@end multitable
@sp 1

@c =========================================================================
@c Examples
@c =========================================================================

@node Examples, Version history, How to develop a new model?, Top
@chapter Examples

@menu
* Drainage of a column::        
@end menu


@c =========================================================================
@c Drainage of a column
@c =========================================================================

@node Drainage of a column, , Examples, Examples
@section Drainage of a column

This problem is governed by the Richards' equation. A 1 meter high sand column is initially saturated. The liquid pressure is initialized as: @math{p_l = p_{atm} - g(x - 1)}. At @math{t=0} we drained the column from the bottom by imposing the pressure to @math{p_l=p_{atm}}. The input data file is given below.

@sp 1
@multitable @columnfractions 0.45 0.55
@item @strong{inputs} @tab @strong{comments}

@sp 2

@item @code{# Drainage of }     @tab You can write some comments
@item @code{# a sand column}    @tab by beginning any line with #.

@sp 2


@item @code{Geometry}           @tab Geometry of the problem
@item @code{1 Plan}             @tab 1D pb, plane symmetry

@sp 2


@item @code{Mesh}               @tab Mesh
@item @code{col.msh}            @tab The mesh is read in this file (format Gmsh). This mesh consists in a 20 elements mesh between 0 and 1. There are 2 regions. The region 1 is the point at 0. The region 2 is the line between 0 and 1. There is 1 material.

@sp 2


@item @code{Material}           @tab Material 1
@item @code{Model = M1}         @tab code name of the model
@item @code{gravite = -9.81}    @tab gravity
@item @code{phi = 0.3}          @tab porosity
@item @code{rho_l = 1000}       @tab fluid mass density
@item @code{k_int = 4.4e-13}    @tab intrinsic permeability
@item @code{mu_l = 0.001}       @tab fluid viscosity
@item @code{p_g = 100000}       @tab gas pressure
@item @code{Curves = tab}       @tab in the file tab, there 3 columns: @math{p_c} @math{S_l} @math{k_{rl}}

@sp 2


@item @code{Fields}             @tab Fields
@item @code{2}                  @tab 2 fields
@item @code{Type = affine Value = 1.e5 Gradient = -9.81 Point = 1.} @tab affine field defined by @math{10^5 - 9.81*(x - 1)}
@item @code{Type = affine Value = 1.e5 Gradient = 0.    Point = 0.} @tab constant field equal to @math{10^5}

@sp 2


@item @code{Initialization}     @tab Initial conditions
@item @code{1}                  @tab 1 initial condition
@item @code{Region = 2 Unknown = p_l Field = 1} @tab in the region 2, @math{p_l=10^5-9.81*(x-1.)}.

@sp 2


@item @code{Functions}          @tab Time functions @math{f(t)}
@item @code{0}                  @tab here there is no function

@sp 2


@item @code{Boundary Conditions}           @tab Boundary conditions
@item @code{1}                  @tab 1 boundary condition
@item @code{Region = 1 Unknown = p_l Field = 2 Function = 0} @tab in the region 1, @math{p_l=f(t)*10^5} (by default @math{f(t)=1})

@sp 2


@item @code{Loads}              @tab Loads
@item @code{0}                  @tab there is no load

@sp 2


@item @code{Points}             @tab Points where we want outputs
@item @code{0}                  @tab no points

@sp 2


@item @code{Dates}              @tab Dates where we want outputs
@item @code{2}                  @tab 2 dates
@item @code{0. 1800000}         @tab @math{t_0=0} and @math{t_1=1800000}

@sp 2


@item @code{Objective Variations}           @tab Objective variations of unknowns
@item @code{p_l = 1000}         @tab objective variation @math{\Delta p_l=1000}

@sp 2


@item @code{Iterative Process}  @tab Parameters for the iterative process
@item @code{Iterations = 20}    @tab 20 iterations
@item @code{Tolerance = 1e-10}  @tab the tolerance is @math{10^{-10}}
@item @code{Repetitions = 0}    @tab no repetition

@sp 2


@item @code{Time Steps}         @tab Parameters for time steps calculation
@item @code{Dtini = 1}          @tab initial time step equal to 1.
@item @code{Dtmax = 3600}       @tab maximum time step equal to 3600.
@c @caption{Input data file (drainage of a column).}
@end multitable
@sp 1

@c =========================================================================
@c Version history
@c =========================================================================
                                                                                
@node Version history, License, Examples, Top
@chapter Version history

@verbatiminclude ../../CHANGELOG
                                                            

@c =========================================================================
@c License
@c =========================================================================

@node  License, , Version history, Top
@appendix License

@verbatiminclude ../../LICENSE

@c @include license.texi

@bye
